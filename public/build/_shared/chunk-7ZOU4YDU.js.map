{
  "version": 3,
  "sources": ["../../../app/context/priceContext.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/context/priceContext.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/context/priceContext.tsx\");\n  import.meta.hot.lastModified = \"1695297940761.3896\";\n}\n// REMIX HMR END\n\n// Files and modules\nimport { createContext, useState, useEffect } from \"react\";\n// Token price context\nconst PriceContext = createContext({});\n// Token price context provider\nconst PriceContextProvider = ({\n  children\n}) => {\n  _s();\n  // Token price state\n  const [prices, setPrices] = useState({});\n\n  // Update token prices on interval\n  useEffect(() => {\n    updatePrices();\n    const interval = setInterval(async () => {\n      try {\n        await updatePrices();\n      } catch (error) {\n        console.error(error);\n      }\n    }, 3000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Update token prices\n  async function updatePrices() {\n    // Fetch quotes from Binance\n    const prices = {};\n    const markets = await fetch(\"https://api.binance.com/api/v3/ticker/price\").then(async x => await x.json());\n    for (const market of markets) {\n      if (market.symbol.endsWith(\"USDT\")) {\n        const token = market.symbol.slice(0, -4);\n        prices[token] = +market.price;\n\n        // Wrapped token price\n        if ([\"ETH\", \"MATIC\", \"FTM\", \"AVAX\", \"BNB\"].includes(token)) {\n          prices[`W${token}`] = +market.price;\n        }\n\n        // Avalanche wrapped token price\n        if ([\"ETH\", \"USDC\", \"DAI\", \"USDT\", \"BTC\"].includes(token)) {\n          if ([\"ETH\", \"BTC\"].includes(token)) {\n            prices[`W${token}.e`] = +market.price;\n          } else {\n            prices[`${token}.e`] = +market.price;\n          }\n        }\n\n        // BSC token price\n        if (token === \"BTC\") {\n          prices[\"BTCB\"] = +market.price;\n        }\n      }\n    }\n\n    // Additional token prices\n    prices[\"USDT\"] = 1;\n    prices[\"fUSDT\"] = 1;\n    prices[\"USDT.e\"] = 1;\n    prices[\"MIM\"] = 1;\n    setPrices(prices);\n  }\n\n  // Component\n  return <PriceContext.Provider value={prices}>{children}</PriceContext.Provider>;\n};\n\n// Exports\n_s(PriceContextProvider, \"AyDZng7+aEBipOGwqaguTBzobZI=\");\n_c = PriceContextProvider;\nexport { PriceContextProvider };\nexport default PriceContext;\nvar _c;\n$RefreshReg$(_c, \"PriceContextProvider\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;AAsBA,mBAAmD;AAgE1C;AArFT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mCAAqC,EAAE;AAAA,EAChF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA8B;AAC9B,cAAY,IAAI,eAAe;AACjC;AAMA,IAAM,mBAAe,4BAAc,CAAC,CAAC;AAErC,IAAM,uBAAuB,CAAC;AAAA,EAC5B;AACF,MAAM;AACJ,KAAG;AAEH,QAAM,CAAC,QAAQ,SAAS,QAAI,uBAAS,CAAC,CAAC;AAGvC,8BAAU,MAAM;AACd,iBAAa;AACb,UAAM,WAAW,YAAY,YAAY;AACvC,UAAI;AACF,cAAM,aAAa;AAAA,MACrB,SAAS,OAAP;AACA,gBAAQ,MAAM,KAAK;AAAA,MACrB;AAAA,IACF,GAAG,GAAI;AACP,WAAO,MAAM,cAAc,QAAQ;AAAA,EACrC,GAAG,CAAC,CAAC;AAGL,iBAAe,eAAe;AAE5B,UAAMA,UAAS,CAAC;AAChB,UAAM,UAAU,MAAM,MAAM,6CAA6C,EAAE,KAAK,OAAM,MAAK,MAAM,EAAE,KAAK,CAAC;AACzG,eAAW,UAAU,SAAS;AAC5B,UAAI,OAAO,OAAO,SAAS,MAAM,GAAG;AAClC,cAAM,QAAQ,OAAO,OAAO,MAAM,GAAG,EAAE;AACvC,QAAAA,QAAO,KAAK,IAAI,CAAC,OAAO;AAGxB,YAAI,CAAC,OAAO,SAAS,OAAO,QAAQ,KAAK,EAAE,SAAS,KAAK,GAAG;AAC1D,UAAAA,QAAO,IAAI,OAAO,IAAI,CAAC,OAAO;AAAA,QAChC;AAGA,YAAI,CAAC,OAAO,QAAQ,OAAO,QAAQ,KAAK,EAAE,SAAS,KAAK,GAAG;AACzD,cAAI,CAAC,OAAO,KAAK,EAAE,SAAS,KAAK,GAAG;AAClC,YAAAA,QAAO,IAAI,SAAS,IAAI,CAAC,OAAO;AAAA,UAClC,OAAO;AACL,YAAAA,QAAO,GAAG,SAAS,IAAI,CAAC,OAAO;AAAA,UACjC;AAAA,QACF;AAGA,YAAI,UAAU,OAAO;AACnB,UAAAA,QAAO,MAAM,IAAI,CAAC,OAAO;AAAA,QAC3B;AAAA,MACF;AAAA,IACF;AAGA,IAAAA,QAAO,MAAM,IAAI;AACjB,IAAAA,QAAO,OAAO,IAAI;AAClB,IAAAA,QAAO,QAAQ,IAAI;AACnB,IAAAA,QAAO,KAAK,IAAI;AAChB,cAAUA,OAAM;AAAA,EAClB;AAGA,SAAO,mDAAC,aAAa,UAAb,EAAsB,OAAO,QAAS,YAAvC;AAAA;AAAA;AAAA;AAAA,SAAgD;AACzD;AAGA,GAAG,sBAAsB,8BAA8B;AACvD,KAAK;AAEL,IAAO,uBAAQ;AACf,IAAI;AACJ,aAAa,IAAI,sBAAsB;AAEvC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["prices"]
}
