{
  "version": 3,
  "sources": ["../../../app/utils/ssr.ts", "../../../app/utils/storage.ts", "../../../node_modules/zustand/esm/vanilla.mjs", "../../../node_modules/zustand/esm/index.mjs", "../../../app/store/global.ts", "../../../app/store/auth.ts", "../../../app/store/index.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/ssr.ts\"\n);\nimport.meta.hot.lastModified = \"1692048283000\";\n}\n// REMIX HMR END\n\nexport function isSSR(): boolean {\n  return typeof document === \"undefined\";\n}\n\nexport function sharedEnv(): any {\n  return isSSR() ? process.env : (window as any).env;\n}\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/storage.ts\"\n);\nimport.meta.hot.lastModified = \"1692048283000\";\n}\n// REMIX HMR END\n\nimport { isSSR } from \"~/utils/ssr\";\n\nclass Storage {\n  private storage: typeof window.localStorage | undefined = undefined;\n\n  // parse json\n  private parse<T>(data: T) {\n    const parsed = typeof data === \"string\" ? JSON.parse(data) : data;\n    return parsed;\n  }\n\n  // stringify json\n  private stringify<T>(data: T) {\n    const stringified = typeof data !== \"string\" ? JSON.stringify(data) : data;\n    return stringified;\n  }\n\n  // initialize storage on create\n  public initialize() {\n    if (isSSR()) return undefined;\n\n    this.storage = window.localStorage;\n  }\n\n  // read storage\n  public get(key: string) {\n    if (!this.storage) return undefined;\n\n    const property = this.storage.getItem(key);\n\n    if (property === undefined || property === null) {\n      return undefined;\n    }\n\n    return this.parse(property);\n  }\n\n  // write storage\n  public set<T>(key: string, value: T) {\n    if (!this.storage) return undefined;\n\n    if (typeof key === \"undefined\") {\n      return console.error(\"[storage] Key is must be set.\");\n    }\n\n    if (typeof value === \"undefined\") {\n      return console.error(\"[storage] Value is must be set.\");\n    }\n\n    const stringifiedValue = this.stringify(value);\n    this.storage.setItem(key, stringifiedValue);\n  }\n\n  // remove storage\n  public remove(key: string) {\n    if (!this.storage) return undefined;\n\n    if (typeof key === \"undefined\" || typeof key !== \"string\") {\n      return console.error(`[storage] Key is must be set in string. key: ${key || \"none\"}`);\n    }\n\n    this.storage.removeItem(key);\n  }\n}\n\nexport const storage = new Storage();\nstorage.initialize();\n", "const createStoreImpl = (createState) => {\n  let state;\n  const listeners = /* @__PURE__ */ new Set();\n  const setState = (partial, replace) => {\n    const nextState = typeof partial === \"function\" ? partial(state) : partial;\n    if (!Object.is(nextState, state)) {\n      const previousState = state;\n      state = (replace != null ? replace : typeof nextState !== \"object\") ? nextState : Object.assign({}, state, nextState);\n      listeners.forEach((listener) => listener(state, previousState));\n    }\n  };\n  const getState = () => state;\n  const subscribe = (listener) => {\n    listeners.add(listener);\n    return () => listeners.delete(listener);\n  };\n  const destroy = () => {\n    if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n      console.warn(\n        \"[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected.\"\n      );\n    }\n    listeners.clear();\n  };\n  const api = { setState, getState, subscribe, destroy };\n  state = createState(setState, getState, api);\n  return api;\n};\nconst createStore = (createState) => createState ? createStoreImpl(createState) : createStoreImpl;\nvar vanilla = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use import { createStore } from 'zustand/vanilla'.\"\n    );\n  }\n  return createStore(createState);\n};\n\nexport { createStore, vanilla as default };\n", "import { createStore } from 'zustand/vanilla';\nexport * from 'zustand/vanilla';\nimport { useDebugValue } from 'react';\nimport useSyncExternalStoreExports from 'use-sync-external-store/shim/with-selector.js';\n\nconst { useSyncExternalStoreWithSelector } = useSyncExternalStoreExports;\nlet didWarnAboutEqualityFn = false;\nfunction useStore(api, selector = api.getState, equalityFn) {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && equalityFn && !didWarnAboutEqualityFn) {\n    console.warn(\n      \"[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937\"\n    );\n    didWarnAboutEqualityFn = true;\n  }\n  const slice = useSyncExternalStoreWithSelector(\n    api.subscribe,\n    api.getState,\n    api.getServerState || api.getState,\n    selector,\n    equalityFn\n  );\n  useDebugValue(slice);\n  return slice;\n}\nconst createImpl = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\" && typeof createState !== \"function\") {\n    console.warn(\n      \"[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`.\"\n    );\n  }\n  const api = typeof createState === \"function\" ? createStore(createState) : createState;\n  const useBoundStore = (selector, equalityFn) => useStore(api, selector, equalityFn);\n  Object.assign(useBoundStore, api);\n  return useBoundStore;\n};\nconst create = (createState) => createState ? createImpl(createState) : createImpl;\nvar react = (createState) => {\n  if ((import.meta.env ? import.meta.env.MODE : void 0) !== \"production\") {\n    console.warn(\n      \"[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`.\"\n    );\n  }\n  return create(createState);\n};\n\nexport { create, react as default, useStore };\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/store/global.ts\"\n);\nimport.meta.hot.lastModified = \"1692048283000\";\n}\n// REMIX HMR END\n\nimport { StateCreator } from \"zustand\";\n\n// config\nimport { Constants } from \"~/config\";\n\n// utils\nimport { storage } from \"~/utils/storage\";\n\n// types\nimport { Theme } from \"~/types/context.types\";\n\nexport type GlobalState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nexport const createGlobalStore: StateCreator<GlobalState> = (set) => ({\n  theme: Theme.Dark,\n  setTheme: (theme: Theme) => {\n    set((state) => ({ ...state, theme }));\n    storage.set(Constants.Theme, theme);\n  },\n});\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/store/auth.ts\"\n);\nimport.meta.hot.lastModified = \"1692048283000\";\n}\n// REMIX HMR END\n\nimport { StateCreator } from \"zustand\";\n\ninterface Profile {\n  name: string;\n  wallet_address: string;\n}\n\nexport type AuthState = {\n  profile: Profile | undefined;\n  token: string | undefined;\n  setProfile: (profile: any) => void;\n  setToken: (token: string) => void;\n};\n\nexport const createAuthStore: StateCreator<AuthState> = (set) => ({\n  profile: undefined,\n  token: \"ey.15112412412...\",\n  setProfile: (profile: Profile) => {\n    set((state) => ({ ...state, profile }));\n  },\n  setToken: (token: string) => {\n    set((state) => ({ ...state, token }));\n  },\n});\n", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/store/index.ts\"\n);\nimport.meta.hot.lastModified = \"1692048283000\";\n}\n// REMIX HMR END\n\nimport { create } from \"zustand\";\n\n// slices\nimport { createGlobalStore, type GlobalState } from \"./global\";\nimport { createAuthStore, type AuthState } from \"./auth\";\n\ntype AppState = GlobalState & AuthState;\n\nexport const useAppStore = create<AppState>((...store) => ({\n  ...createGlobalStore(...store),\n  ...createAuthStore(...store),\n  // ...createAuthStore(...store),\n}));\n"],
  "mappings": "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",
  "names": ["useSyncExternalStoreExports"]
}
