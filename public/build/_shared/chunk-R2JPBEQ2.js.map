{
  "version": 3,
  "sources": ["../../../app/components/shared/Image.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/shared/Image.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/shared/Image.tsx\");\n  import.meta.hot.lastModified = \"1695297940754.4985\";\n}\n// REMIX HMR END\n\nimport React, { useEffect } from \"react\";\n\n// utils\nimport { cn } from \"~/utils/cn\";\n/**\n * @param {string} src - source of image\n * @param {string} alt - alternate text\n * @param {string} loading - load method [default: lazy]\n * @param {string} objectFit - render behaviour of image\n * @param {number | string} width - width of image\n * @param {number | string} height - height of image\n * @param {function} onLoad - callback function on image load\n * @returns {node} <img /> element\n */\nconst Image = _s(React.memo(_c = _s(function Image({\n  src,\n  alt,\n  loading = \"lazy\",\n  objectFit,\n  width,\n  height,\n  onLoad\n}) {\n  _s();\n  const id = React.useId();\n  const image = React.useRef(null);\n  const [imageLoaded, setImageLoaded] = React.useState(true);\n  const handleImageLoaded = () => {\n    setImageLoaded(true);\n    if (typeof onLoad === \"function\") {\n      onLoad();\n    }\n  };\n\n  // loaded control on mount because if image is already in cache\n  // onLoad function not trigger again\n  useEffect(() => {\n    if (!image.current) return;\n    if (image.current.complete) {\n      handleImageLoaded();\n    }\n  }, [image.current]);\n  const props = {\n    src,\n    alt,\n    loading,\n    ...(width && {\n      width\n    }),\n    ...(height && {\n      height\n    })\n  };\n\n  // fix: onLoad not working\n\n  return <img ref={image} key={id} id={id} className={cn(\"opacity-0 transition-opacity duration-75\", {\n    \"!opacity-100\": imageLoaded,\n    \"max-w-full\": !width,\n    \"object-cover\": objectFit === \"cover\",\n    \"object-contain\": objectFit === \"contain\",\n    \"object-fill\": objectFit === \"fill\"\n  })} style={width && height ? {\n    width,\n    height\n  } : {}} onLoad={handleImageLoaded} {...props} />;\n}, \"uFAAyTGojiCHhdfei0Xce7uKXko=\", false, function () {\n  return [React.useId];\n})), \"uFAAyTGojiCHhdfei0Xce7uKXko=\", false, function () {\n  return [React.useId];\n});\n_c2 = Image;\nexport default Image;\n/**\n * container for image component.\n * can be used for image loading placeholders.\n * usage: wrap your Image component by ImageContainer.\n * @param {string} className css classnames\n * @param {node} children <Image /> element\n * @returns <span /> element\n */\nexport function ImageContainer({\n  className,\n  children\n}) {\n  return <span className={cn(\"flex flex-1 bg-gray-100 dark:bg-gray-800 animate-pulse\", className)}>\n      {children}\n    </span>;\n}\n_c3 = ImageContainer;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Image$React.memo\");\n$RefreshReg$(_c2, \"Image\");\n$RefreshReg$(_c3, \"ImageContainer\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;AAqBA,mBAAiC;AAwDxB;AA5ET,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,sCAAwC,EAAE;AAAA,EACnF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAiC;AACjC,cAAY,IAAI,eAAe;AACjC;AAiBA,IAAM,QAAQ,GAAG,aAAAA,QAAM,KAAK,KAAK,GAAG,SAASC,OAAM;AAAA,EACjD;AAAA,EACA;AAAA,EACA,UAAU;AAAA,EACV;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,KAAG;AACH,QAAM,KAAK,aAAAD,QAAM,MAAM;AACvB,QAAM,QAAQ,aAAAA,QAAM,OAAO,IAAI;AAC/B,QAAM,CAAC,aAAa,cAAc,IAAI,aAAAA,QAAM,SAAS,IAAI;AACzD,QAAM,oBAAoB,MAAM;AAC9B,mBAAe,IAAI;AACnB,QAAI,OAAO,WAAW,YAAY;AAChC,aAAO;AAAA,IACT;AAAA,EACF;AAIA,8BAAU,MAAM;AACd,QAAI,CAAC,MAAM;AAAS;AACpB,QAAI,MAAM,QAAQ,UAAU;AAC1B,wBAAkB;AAAA,IACpB;AAAA,EACF,GAAG,CAAC,MAAM,OAAO,CAAC;AAClB,QAAM,QAAQ;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAI,SAAS;AAAA,MACX;AAAA,IACF;AAAA,IACA,GAAI,UAAU;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAIA,SAAO,mDAAC,SAAI,KAAK,OAAgB,IAAQ,WAAW,GAAG,4CAA4C;AAAA,IACjG,gBAAgB;AAAA,IAChB,cAAc,CAAC;AAAA,IACf,gBAAgB,cAAc;AAAA,IAC9B,kBAAkB,cAAc;AAAA,IAChC,eAAe,cAAc;AAAA,EAC/B,CAAC,GAAG,OAAO,SAAS,SAAS;AAAA,IAC3B;AAAA,IACA;AAAA,EACF,IAAI,CAAC,GAAG,QAAQ,mBAAoB,GAAG,SATV,IAAtB;AAAA;AAAA;AAAA;AAAA,SASuC;AAChD,GAAG,gCAAgC,OAAO,WAAY;AACpD,SAAO,CAAC,aAAAA,QAAM,KAAK;AACrB,CAAC,CAAC,GAAG,gCAAgC,OAAO,WAAY;AACtD,SAAO,CAAC,aAAAA,QAAM,KAAK;AACrB,CAAC;AACD,MAAM;AACN,IAAO,gBAAQ;AASR,SAAS,eAAe;AAAA,EAC7B;AAAA,EACA;AACF,GAAG;AACD,SAAO,mDAAC,UAAK,WAAW,GAAG,0DAA0D,SAAS,GACzF,YADE;AAAA;AAAA;AAAA;AAAA,SAEL;AACJ;AACA,MAAM;AACN,IAAI;AAAJ,IAAQ;AAAR,IAAa;AACb,aAAa,IAAI,kBAAkB;AACnC,aAAa,KAAK,OAAO;AACzB,aAAa,KAAK,gBAAgB;AAElC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["React", "Image"]
}
